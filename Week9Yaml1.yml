AWSTemplateFormatVersion: "2010-09-09"
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-VPC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicWebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  PublicWebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true 
  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.24.0/24
      MapPublicIpOnLaunch: false
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.32.0/24
      MapPublicIpOnLaunch: false
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.48.0/24
      MapPublicIpOnLaunch: false
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.60.0/24
      MapPublicIpOnLaunch: false
  PublicWebRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicWebSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicWebSubnet1
  PublicWebSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicWebSubnet2
  PrivateAppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateAppSubnet1
  PrivateAppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateAppSubnet2
  PrivateDBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateDBSubnet1
  PrivateDBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateDBSubnet2
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups: 
       - !Ref InstanceSecurityGroup
      AllocatedStorage: '20'
      PubliclyAccessible: 'false'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: AdminName
      MasterUserPassword: AdminPassword
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      AvailabilityZone: us-east-1a
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MySQL subnet group
      SubnetIds: 
       - !Ref PrivateDBSubnet1
       - !Ref PrivateDBSubnet2
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NatEIP
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatEIP
        - AllocationId
      SubnetId:
        Ref: WebSubnet1
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  InboundPublicNetworkAclAllowNat:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowNatRuleNumber
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  WebAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier: 
        - !Ref PublicWebSubnet1
        - !Ref PublicWebSubnet2
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs: 
        - !Ref ALBTargetGroup 
  AppAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '2'
      DesiredCapacity: '2'
      VPCZoneIdentifier: 
        - !Ref PrivateAppSubnet1
        - !Ref PrivateDBSubnet2
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs: 
        - !Ref ALBTargetGroup 
  ScalingPolicyWk9:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'
  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Trigger An Alarm if the CPU usage goes higher than 50%
      Period: '60'
      AlarmActions:
        - !Ref ScalingPolicyWk9
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ApplicationLoadBalancer : 
    Type : 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties : 
      Subnets : 
       - !Ref PrivateSubnet1
       - !Ref DBSubnet1
      SecurityGroups: 
       - !GetAtt LBSecurityGroup.GroupId  
  WebTierLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties :
      Subnets: 
       - !Ref WebSubnet1
       - !Ref WebSubnet2
      SecurityGroups: 
        - !GetAtt LBSecurityGroup.GroupId 
  ALBTargetGroup : 
    Type : 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties : 
      HealthCheckIntervalSeconds : '30'
      HealthCheckTimeoutSeconds : '5'
      HealthyThresholdCount" : '3'
      Port : '80'
      Protocol : HTTP
      UnhealthyThresholdCount : '5'
      VpcId : !Ref VpcId
  WebTierALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  WebTierSecurityGroup:
    Type : AWS::EC2::SecurityGroup
    Properties : 
      GroupDescription : Enable SSH access and HTTP traffic from the ApplicationSG, and Internet
      SecurityGroupIngress : 
        - IpProtocol : tcp
          FromPort : 22
          ToPort : 22
          CidrIp : 0.0.0.0/0
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
        - IpProtocol : tcp
          FromPort : 80
          ToPort : 80
          CidrIp : 0.0.0.0/0
          SourceSecurityGroupId: !Ref LBSecurityGroup
  AppSecurityGroup:
    Type : AWS::EC2::SecurityGroup
    Properties : 
      GroupDescription : Allow HTTP traffic from the WebTier
      SecurityGroupIngress :      
        - IpProtocol : tcp
          FromPort : 80
          ToPort : 80
          CidrIp : 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  DatabaseSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Allow Traffic from the Application SG to the DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
  LBSecurityGroup:
    Type : AWS::EC2::SecurityGroup
    Properties : 
      GroupDescription : Allow SSH & HTTP traffic from the WebTier to the App Tier
      SecurityGroupIngress :  
        - IpProtocol : tcp
          FromPort : 22
          ToPort : 22
          CidrIp : 0.0.0.0/0    
        - IpProtocol : tcp
          FromPort : 80
          ToPort : 80
          CidrIp : 0.0.0.0/0
          SourceSecurityGroupId: !Ref WebTierSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  BastionHotSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: All the Bastion Host SG to talk to App and Web Tiers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  VpcId : !Ref VPC
  Bastion: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref LatestAmiId
      SecurityGroupIds: 
        - !GetAtt BastionHostSecurityGroup.GroupId 
      InstanceType: 
        !Ref InstanceType
      SubnetId: !Ref WebSubnet1
      KeyName: Key 
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: Sub '${AWS::StackName}-ASGtemplate'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref WebTierSecurityGroup
        ImageId: ami-09d3b3274b6c5d4aa
        InstanceType: t2.micro
        UserData:
          'Fn::Base64': !Sub |
             #!/bin/bash 
             yum update -y
             yum install -y httpd
             systemctl start httpd
             systemctl enable httpd
             echo "<h1>Creating 3-Tier Architectures with the Blue Team!!</h1>" >> /var/www/html/index.html
